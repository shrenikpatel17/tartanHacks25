(()=>{var n={670:()=>{},230:()=>{}},e={};function t(o){var r=e[o];if(void 0!==r)return r.exports;var a=e[o]={exports:{}};return n[o](a,a.exports,t),a.exports}t.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return t.d(e,{a:e}),e},t.d=(n,e)=>{for(var o in e)t.o(e,o)&&!t.o(n,o)&&Object.defineProperty(n,o,{enumerable:!0,get:e[o]})},t.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),(()=>{"use strict";var n=t(670),e=t(230),o=t.n(e);const r="AIzaSyDgvn7pJUXVv3ebiq6ipboGYF6XlmAPkJA",a=`https://vision.googleapis.com/v1/images:annotate?key=${r}`,s=`https://translation.googleapis.com/language/translate/v2?key=${r}`;async function i(n,e){try{console.log("Starting image translation for URL:",n);const t=await async function(n){try{console.log("Starting image download for URL:",n);const e=await async function(n){try{const e=await chrome.runtime.sendMessage({action:"proxyImage",imageUrl:n});if(e.error)throw new Error(e.error);return e.dataUrl}catch(n){throw console.error("Error proxying image:",n),n}}(n);if(console.log("Raw proxy response:",e),!e)throw new Error("Empty response received from proxy");if(e&&"object"==typeof e&&"error"in e)throw new Error(`Proxy error: ${JSON.stringify(e)}`);if("string"!=typeof e)throw new Error("Invalid response type: "+typeof e);if(!/^data:image\/[a-zA-Z]+;base64,/.test(e))throw new Error("Invalid base64 image format");return console.log("Successfully received base64 image, length:",e.length),e}catch(e){throw console.error("Error downloading image:",{error:e,errorType:e?.constructor?.name,url:n,errorMessage:e instanceof Error?e.message:"Unknown error",stack:e instanceof Error?e.stack:void 0}),e}}(n);if(!t)throw new Error("Failed to download image - empty response");console.log("Image downloaded successfully, length:",t.length);const o=await async function(n){const e={requests:[{image:{content:n.replace(/^data:image\/(png|jpeg|jpg);base64,/,"")},features:[{type:"TEXT_DETECTION",maxResults:10}]}]};try{const n=await fetch(a,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)}),t=await n.json();if(t.error)throw new Error(t.error.message);const o=t.responses[0].textAnnotations;if(!o||!o.length)throw new Error("No text detected in the image.");return o.slice(1).map((n=>({text:n.description,vertices:n.boundingPoly?.vertices||[]})))}catch(n){throw console.error("Error during text detection:",n),n}}(t);if(!o||0===o.length)throw new Error("No text detected in image");console.log("Detected text entries:",o.length);const r=await Promise.all(o.map((async({text:n,vertices:t})=>{const o=await async function(n,e){const t={q:[n],target:e};console.log("translating text",n,e);try{const n=await fetch(s,{method:"POST",headers:{"Content-Type":"application/json",Accept:"application/json"},body:JSON.stringify(t)}),e=await n.json();if(e.error)throw new Error(e.error.message);return e.data.translations[0].translatedText}catch(n){throw console.error("Error during translation:",n),n}}(n,e);return{original:n,translated:o,vertices:t}})));return{success:!0,translatedData:r}}catch(t){return console.error("❌ Process failed:",{error:t,errorMessage:t instanceof Error?t.message:"Unknown error",errorStack:t instanceof Error?t.stack:void 0,imageUrl:n,targetLanguage:e}),{success:!1,error:t instanceof Error?t.message:"Unknown error"}}}async function c(n){try{const e=await chrome.runtime.sendMessage({action:"proxyYoutube",videoId:n});if(e.error)throw new Error(e.error);return console.log("response.transcript",e.transcript),e.transcript}catch(n){throw console.error("Error proxying YouTube request:",n),n}}const d="#2196F3",l=[{code:"fr",name:"French"},{code:"es",name:"Spanish"},{code:"de",name:"German"},{code:"it",name:"Italian"},{code:"ja",name:"Japanese"},{code:"ko",name:"Korean"},{code:"zh",name:"Chinese"},{code:"vi",name:"Vietnamese"},{code:"gu",name:"Gujarati"}];let p=l[0];const g=`\n.whale-button {\n    position: fixed;\n    right: 13px;\n    bottom: 25px;\n    width: 90px;\n    height: 90px;\n    border: none;\n    background: transparent;\n    cursor: pointer;\n    z-index: 1000;\n    transition: transform 0.2s;\n    padding: 0;  // Remove padding\n}\n\n.whale-button:hover {\n    transform: scale(1.1);\n}\n\n.whale-img {\n    width: 100%;  // Make image fill the button\n    height: 100%;\n    object-fit: contain;\n    display: block;  // Remove any extra space\n}\n    \n.text-extractor-button {\n  position: fixed;\n  bottom: 20px;\n  right: 20px;\n  z-index: 10000;\n  padding: 10px 20px;\n  background-color: #2196F3;\n  color: white;\n  border: none;\n  border-radius: 5px;\n  cursor: pointer;\n  box-shadow: 0 2px 5px rgba(0,0,0,0.2);\n}\n\n.text-extractor-modal {\n  display: none;\n  position: fixed;\n  bottom: 80px;\n  right: 20px;\n  width: 300px;\n  max-height: 400px;\n  background-color: white;\n  border-radius: 5px;\n  box-shadow: 0 2px 10px rgba(0,0,0,0.1);\n  z-index: 10000;\n  padding: 15px;\n  overflow-y: auto;\n}\n\n.text-extractor-modal.show {\n  display: block;\n}\n\n.text-extractor-close {\n  position: absolute;\n  top: 10px;\n  right: 10px;\n  cursor: pointer;\n  font-weight: bold;\n}\n\n.icon-button {\n    position: fixed;\n    z-index: 1000;\n    border: none;\n    background: none;\n    cursor: pointer;\n    transition: transform 0.2s;\n    width: 40px;\n    height: 40px;\n    border-radius: 50%;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n}\n\n.icon-button:hover {\n    transform: scale(1.1);\n}\n\n/* 聊天按钮定位 */\n.chat-button {\n    right: 77px;\n    bottom: 85px;\n}\n\n/* 菜单按钮定位 */\n.menu-button {\n    right: 40px;\n    bottom: 85px;\n    z-index: 1001;\n}\n\n/* 模态框样式 */\n.menu-modal {\n    position: fixed;\n    top: 64%;\n    left: 84%;\n    transform: translate(-50%, -50%);\n    width: 300px;\n    background:rgb(243, 248, 255);\n    border-radius: 12px;  /* Rounded corners for modal */\n    box-shadow: 0 8px 32px rgba(0,0,0,0.1);\n    padding: 0;  /* Remove default padding */\n    z-index: 1001;\n    display: none;\n    overflow: hidden;  /* Ensure content doesn't overflow rounded corners */\n}\n\n.menu-header {\n    margin-top: 4px;  /* Reduce space below progress bar */\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    padding: 8px 16px;  /* Add horizontal padding */\n    height: 40px;  /* Reduce header height */\n}\n\n.menu-modal.show {\n    display: block; /* 显示时切换为block */\n}\n\n.points-badge {\n    background: rgba(255,255,255,0.9);\n    padding: 8px 16px;\n    border-radius: 20px;\n    display: flex;\n    align-items: center;\n    gap: 8px;\n    font-weight: 500;\n}\n\n.menu-button-container {\n    display: flex;\n    flex-direction: column;\n    gap: 12px;\n}\n\n.menu-option {\n    padding: 12px;\n    border-radius: 8px;\n    border: 1px solid #eee;\n    background:rgb(216, 228, 255);\n    display: flex;\n    align-items: center;\n    gap: 5px;\n    width: 90%;\n    text-align: center;\n    transition: background 0.2s;\n}\n\n.menu-option:hover {\n    background: #fff;\n    cursor: pointer;\n}\n\n.option-icon {\n    flex-shrink: 0;\n}\n\n.word-bank-modal {\n    display: none;\n    position: fixed;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n    width: 80%;\n    max-width: 600px;\n    max-height: 80vh;\n    background-color: white;\n    border-radius: 15px;\n    box-shadow: 0 4px 20px rgba(0,0,0,0.15);\n    z-index: 10002;\n    overflow: hidden;\n}\n\n.word-bank-modal.show {\n    display: block;\n}\n\n.word-bank-header {\n    background-color: #1976D2;\n    color: white;\n    padding: 20px;\n    font-size: 1.5em;\n    font-weight: bold;\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n}\n\n.word-bank-close {\n    cursor: pointer;\n    font-size: 1.5em;\n    color: white;\n}\n\n.word-bank-content {\n    padding: 20px;\n    overflow-y: auto;\n    max-height: calc(80vh - 80px);\n}\n\n.word-bank-grid {\n    display: grid;\n    grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));\n    gap: 15px;\n    padding: 10px;\n}\n\n.word-pair {\n    background: #E3F2FD;\n    border-radius: 10px;\n    padding: 15px;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    transition: transform 0.2s;\n}\n\n.word-pair:hover {\n    transform: translateY(-2px);\n    box-shadow: 0 4px 8px rgba(0,0,0,0.1);\n}\n\n.original-word {\n    color: #666;\n    font-size: 0.9em;\n    margin-bottom: 5px;\n}\n\n.translated-word-display {\n    background-color: #4CAF50;\n    color: white;\n    padding: 2px 6px;\n    border-radius: 12px;\n    font-weight: bold;\n    font-size: 1.1em;\n}\n\n.no-words-message {\n    text-align: center;\n    color: #666;\n    padding: 40px;\n    font-size: 1.1em;\n}\n\n.chat-response {\n    position: fixed;\n    bottom: 200px;\n    right: 20px;\n    background: white;\n    padding: 15px;\n    border-radius: 10px;\n    box-shadow: 0 2px 10px rgba(0,0,0,0.1);\n    max-width: 350px;\n    width: 350px;\n    max-height: 500px;\n    z-index: 10000;\n    display: none;\n    overflow-y: auto;\n}\n\n.chat-response.show {\n    display: block;\n}\n\n.chat-message {\n    margin-bottom: 15px;\n    padding: 10px;\n    border-radius: 8px;\n}\n\n.user-message {\n    background: #E3F2FD;\n    margin-left: 20px;\n    margin-right: 5px;\n}\n\n.ai-message {\n    background: #F5F5F5;\n    margin-right: 20px;\n    margin-left: 5px;\n}\n\n.message-text {\n    margin-bottom: 5px;\n}\n\n.response-target-language {\n    color: #2196F3;\n    margin-bottom: 4px;\n    font-weight: bold;\n}\n\n.response-english {\n    color: #666;\n    font-style: italic;\n}\n\n.timestamp {\n    font-size: 0.8em;\n    color: #999;\n    margin-top: 4px;\n}\n\n.chat-button.recording {\n    background: rgba(255, 0, 0, 0.2);  /* Subtle red background */\n    animation: pulse 2s infinite;\n}\n\n@keyframes pulse {\n    0% {\n        box-shadow: 0 0 0 0 rgba(255, 0, 0, 0.4);\n    }\n    70% {\n        box-shadow: 0 0 0 10px rgba(255, 0, 0, 0);\n    }\n    100% {\n        box-shadow: 0 0 0 0 rgba(255, 0, 0, 0);\n    }\n}\n\n.progress-container {\n    width: 100%;\n    height: 4px;\n    background-color: #E0E0E0;\n    position: relative;  /* Change from absolute to relative */\n    overflow: hidden;\n    border-radius: 4px 4px 0 0;\n}\n\n.progress-bar {\n    height: 100%;\n    width: 0%;\n    background-color: ${d};\n    transition: width 0.3s ease, background-color 0.3s ease;\n}\n\n.menu-container {\n    padding: 0;  /* Remove container padding */\n}\n\n.points-display {\n    font-weight: bold;\n    font-size: 16px;\n}\n\n#language-selector {\n    padding: 4px 8px;\n    border-radius: 4px;\n    border: 1px solid #ddd;\n}\n`,m=document.createElement("style");m.textContent=g,document.head.appendChild(m);const u=document.createElement("button");u.className="whale-button";const h=document.createElement("img");h.src=chrome.runtime.getURL("whale.png"),h.className="whale-img",h.alt="Whale",console.log("Whale image URL:",h.src),u.appendChild(h),document.body.appendChild(u);const x=document.createElement("div");x.className="text-extractor-modal",x.innerHTML='\n  <span class="text-extractor-close">&times;</span>\n  <div class="text-extractor-content"></div>\n',document.body.appendChild(x);const w=x.querySelector(".text-extractor-close"),b=x.querySelector(".text-extractor-content");let f=0,y="",v=[];function k(n){return n.toLocaleTimeString([],{hour:"2-digit",minute:"2-digit"})}async function E(){return document.body.innerText}async function L(){try{console.log("Starting translation..."),document.querySelectorAll(".translated-word").forEach((n=>{const e=n.getAttribute("data-original");if(e){const t=document.createTextNode(e);n.parentNode?.replaceChild(t,n)}}));const e=await E();y=e;const t=await async function(e,t){try{const r=(await chrome.runtime.sendMessage({action:"getApiKey"})).apiKey;if(!r)throw new Error("API key not found");const a=function(n){const e=n.match(/\b[\w']+\b/g)||[];return Array.from(new Set(e)).sort((()=>.5-Math.random())).slice(0,10)}(e);console.log("Words to translate:",a);const s=(await async function(e){try{return await n.promises.readFile(e,"utf-8")}catch(n){throw console.error("Error loading system prompt:",n),new Error("Failed to load system prompt")}}(o().join("/","../prompts/translation.md"))).replace("{{targetLanguage}}",t).replace("{{words}}",a.join(", ")),i=await fetch("https://api.openai.com/v1/chat/completions",{method:"POST",headers:{Authorization:`Bearer ${r}`,"Content-Type":"application/json"},body:JSON.stringify({model:"gpt-4",messages:[{role:"system",content:s},{role:"user",content:"Please proceed with the translation."}],temperature:.5})}),c=await i.json();if(!c.choices||!c.choices[0]||!c.choices[0].message)throw console.error("Unexpected API response:",c),new Error("Invalid API response structure");const d=c.choices[0].message.content;console.log("Translation response:",d);try{const n=JSON.parse(d);return console.log("Final translations:",n),n}catch(n){throw console.error("Error parsing translation response:",n),new Error("Invalid translation format received")}}catch(n){throw console.error("Translation error:",n),n}}(e,p.code);console.log("Got translations:",t),function(n){if(!document.getElementById("translator-style")){const n=document.createElement("style");n.id="translator-style",n.textContent="\n            .translated-word {\n                color: black;\n                background-color: #E3F2FD; /* very light blue */\n                padding: 2px 6px;\n                border-radius: 12px;\n                cursor: pointer;\n                transition: all 0.3s ease;\n                position: relative;\n                display: inline-block;\n                margin: 0 2px;\n            }\n            .translated-word.click-1 {\n                background-color: #90CAF9; /* light blue */\n            }\n            .translated-word.click-2 {\n                background-color: #2196F3; /* medium blue */\n                color: white;\n            }\n            .translated-word.click-3 {\n                background-color: #4CAF50; /* green */\n                color: white;\n            }\n            .translated-word:hover::after {\n                content: attr(data-original);\n                position: absolute;\n                left: 50%;\n                transform: translateX(-50%);\n                bottom: 100%;\n                background: white;\n                color: black;\n                padding: 4px 8px;\n                border-radius: 15px;\n                font-size: 14px;\n                white-space: nowrap;\n                box-shadow: 0 2px 4px rgba(0,0,0,0.2);\n                border: 1px solid #ddd;\n                z-index: 10001;\n                margin-bottom: 5px;\n            }\n        ",document.head.appendChild(n)}function e(n){const e=n.target;if(!e.classList.contains("translated-word"))return;const t=e.getAttribute("data-original");if(!t)return;const o=document.querySelectorAll(`.translated-word[data-original="${t}"]`),r=parseInt(e.getAttribute("data-clicks")||"0"),a=(r+1)%4,s=3===a&&2===r;o.forEach((n=>{n.classList.remove("click-1","click-2","click-3"),a>0&&n.classList.add(`click-${a}`),n.setAttribute("data-clicks",a.toString())})),s&&(f+=100,N(),R())}const t=document.createTreeWalker(document.body,NodeFilter.SHOW_TEXT,{acceptNode:n=>{const e=n.parentNode;return e&&("SCRIPT"===e.tagName||"STYLE"===e.tagName||e.classList.contains("translated-word"))?NodeFilter.FILTER_REJECT:NodeFilter.FILTER_ACCEPT}});let o;const r=[];for(;o=t.nextNode();)r.push(o);r.forEach((t=>{!function(t){let o=t.textContent||"";const r=document.createElement("div");let a=o;if(Object.entries(n).forEach((([n,e])=>{const t=new RegExp(`\\b${n}\\b`,"gi");a=a.replace(t,`<span class="translated-word" \n                      data-original="${n}" \n                      data-clicks="0">${e}</span>`)})),a!==o){r.innerHTML=a,r.querySelectorAll(".translated-word").forEach((n=>{n.addEventListener("click",e)}));const n=document.createDocumentFragment();for(;r.firstChild;)n.appendChild(r.firstChild);t.parentNode?.replaceChild(n,t)}}(t)}))}(t),b&&(b.textContent="Translation complete! Hover over blue text to see original words.")}catch(n){console.error("Translation failed:",n),b&&(b.textContent=`Translation failed: ${n instanceof Error?n.message:"Unknown error"}`)}}async function T(){const n=document.querySelectorAll("iframe");for(const e of n){const n=e.src.match(/youtube\.com\/embed\/([^?]+)/);if(n){const e=n[1];try{const n=await c(e);console.log(`Transcript for video ${e}:`,n)}catch(n){console.error(`Error fetching transcript for video ${e}:`,n)}}}const e=document.querySelectorAll("a");for(const n of e){const e=n.href.match(/(?:youtube\.com\/watch\?v=|youtu\.be\/)([^&]+)/);if(e){const n=e[1];try{const e=await c(n);console.log(`Transcript for video ${n}:`,e)}catch(e){console.error(`Error fetching transcript for video ${n}:`,e)}}}}window.addEventListener("load",(async()=>{await L(),await T()})),new MutationObserver((n=>{n.forEach((n=>{n.addedNodes.length&&T()}))})).observe(document.body,{childList:!0,subtree:!0}),u.addEventListener("click",L),w?.addEventListener("click",(()=>{x.classList.remove("show")})),chrome.runtime.onMessage.addListener(((n,e,t)=>("extractText"===n.action&&t({text:E()}),!0)));const C=document.createElement("button");C.className="icon-button chat-button",C.innerHTML=`\n  <img src="${chrome.runtime.getURL("chat.png")}" \n       class="custom-icon" \n       alt="Chat"\n       width="40"\n       height="40">\n`,document.body.appendChild(C);const S=document.createElement("div");S.className="menu-modal",S.innerHTML=`\n    <div class="menu-container">\n        <div class="progress-container">\n            <div class="progress-bar"></div>\n        </div>\n        <div class="menu-header">\n            <div class="points-display">Points: ${f}</div>\n            <select id="language-selector">\n                ${l.map((n=>`<option value="${n.code}">${n.name}</option>`)).join("")}\n            </select>\n        </div>\n        <div class="menu-options">\n            <div id="word-bank" class="menu-option">\n                <span class="option-icon">📚</span>\n                Word Bank\n            </div>\n            <div id="history" class="menu-option">\n                <span class="option-icon">📖</span>\n                History\n            </div>\n        </div>\n    </div>\n`,document.body.appendChild(S),document.getElementById("language-selector")?.addEventListener("change",(n=>{const e=n.target.value;p=l.find((n=>n.code===e))||l[0],L()}));const $=document.createElement("button");$.className="icon-button menu-button",$.innerHTML=`\n    <img src="${chrome.runtime.getURL("menu.png")}" \n         class="custom-icon" \n         alt="Menu"\n         width="40"\n         height="40">\n`,document.body.appendChild($),$.addEventListener("click",(n=>{n.stopPropagation(),S.classList.toggle("show"),R(),N()})),document.addEventListener("click",(n=>{$.contains(n.target)||S.contains(n.target)||!S.classList.contains("show")||S.classList.remove("show")})),document.getElementById("word-bank")?.addEventListener("click",(()=>{console.log("Word Bank clicked")})),document.getElementById("history")?.addEventListener("click",(()=>{console.log("History clicked")}));const A=document.createElement("div");function F(){const n=[];return document.querySelectorAll(".translated-word").forEach((e=>{if(e.classList.contains("click-3")){const t=e.getAttribute("data-original"),o=e.textContent;t&&o&&n.push([t,o])}})),[...new Set(n.map((n=>JSON.stringify(n))))].map((n=>JSON.parse(n)))}function N(){const n=document.querySelector(".points-display");n&&(n.textContent=`Points: ${f}`)}A.className="word-bank-modal",A.innerHTML='\n    <div class="word-bank-header">\n        Word Bank\n        <span class="word-bank-close">&times;</span>\n    </div>\n    <div class="word-bank-content">\n        <div class="word-bank-grid"></div>\n    </div>\n',document.body.appendChild(A),document.getElementById("word-bank")?.addEventListener("click",(()=>{!function(){const n=A.querySelector(".word-bank-grid");if(!n)return;const e=F();0!==e.length?n.innerHTML=e.map((([n,e])=>`\n        <div class="word-pair">\n            <div class="original-word">${n}</div>\n            <div class="translated-word-display">${e}</div>\n        </div>\n    `)).join(""):n.innerHTML='\n            <div class="no-words-message">\n                No mastered words yet! Click on translated words three times to add them to your word bank.\n            </div>\n        '}(),A.classList.add("show"),S.classList.remove("show")})),A.querySelector(".word-bank-close")?.addEventListener("click",(()=>{A.classList.remove("show")})),document.addEventListener("click",(n=>{A.contains(n.target)||document.getElementById("word-bank")?.contains(n.target)||!A.classList.contains("show")||A.classList.remove("show")}));let I=!1,j=null;const M=[];C.addEventListener("click",(async()=>{try{I?(j?.stop(),I=!1,C.classList.remove("recording")):(M.length=0,j=await async function(){try{const n=await navigator.mediaDevices.getUserMedia({audio:!0}),e=new MediaRecorder(n),t=[];return e.ondataavailable=n=>{t.push(n.data)},e.onstop=async()=>{new Blob(t,{type:"audio/webm"}),n.getTracks().forEach((n=>n.stop()))},e.start(),e}catch(n){throw console.error("Error starting recording:",n),n}}(),I=!0,C.classList.add("recording"),z.textContent="Recording... Click again to stop.",z.classList.add("show"),j.ondataavailable=n=>{M.push(n.data)},j.onstop=async()=>{const n=new Blob(M,{type:"audio/webm"});z.innerHTML="Processing...";try{const e=await async function(n,e,t){try{const o=(await chrome.runtime.sendMessage({action:"getApiKey"})).apiKey;if(!o)throw new Error("API key not found");const r=new FormData;r.append("file",n,"audio.webm"),r.append("model","whisper-1"),r.append("language","en");const a=await fetch("https://api.openai.com/v1/audio/transcriptions",{method:"POST",headers:{Authorization:`Bearer ${o}`},body:r}),s=await a.json();if(!s.text)throw new Error("Failed to transcribe audio");console.log("Transcribed text:",s.text);const i=await fetch("https://api.openai.com/v1/chat/completions",{method:"POST",headers:{Authorization:`Bearer ${o}`,"Content-Type":"application/json"},body:JSON.stringify({model:"gpt-4",messages:[{role:"system",content:`You are a helpful language learning assistant. You have access to the following page context:\n                        \n                        ${t}\n                        \n                        When the user asks a question, use this context to provide accurate answers. Create your response in both ${e} and English. Format your response exactly like this example:\n                        [${e}] Bonjour! Comment puis-je vous aider aujourd'hui?\n                        [English] Hello! How can I help you today?`},{role:"user",content:s.text}],temperature:.7,max_tokens:500})}),c=await i.json();if(!c.choices?.[0]?.message?.content)throw new Error("Failed to get response");const d=c.choices[0].message.content,[l,p]=d.split("\n").map((n=>n.trim())).map((n=>{const e=n.match(/\[(.*?)\] (.*)/);return e?e[2]:n}));return{userText:s.text,targetLanguage:l,english:p}}catch(n){throw console.error("Audio chat error:",n),n}}(n,p.code,y);v.push({type:"user",text:e.userText,timestamp:new Date}),v.push({type:"ai",targetLanguage:e.targetLanguage,english:e.english,timestamp:new Date}),z.innerHTML=v.map((n=>"user"===n.type?`\n                <div class="chat-message user-message">\n                    <div class="message-text">${n.text}</div>\n                    <div class="timestamp">${k(n.timestamp)}</div>\n                </div>\n            `:`\n                <div class="chat-message ai-message">\n                    <div class="response-target-language">${n.targetLanguage}</div>\n                    <div class="response-english">${n.english}</div>\n                    <div class="timestamp">${k(n.timestamp)}</div>\n                </div>\n            `)).join(""),z.scrollTop=z.scrollHeight}catch(n){z.textContent="Failed to process audio. Please try again.",console.error(n)}})}catch(n){console.error("Error with recording:",n),z.textContent="Error accessing microphone. Please check permissions.",z.classList.add("show")}})),document.addEventListener("click",(n=>{C.contains(n.target)||z.contains(n.target)||I||z.classList.remove("show")}));const z=document.createElement("div");z.className="chat-response",document.body.appendChild(z);const P=new class{observer=null;processedImages=new Set;async init(){this.observer=new MutationObserver((n=>{n.forEach((n=>{n.addedNodes.forEach((n=>{n instanceof HTMLImageElement&&this.processImage(n)}))}))})),this.observer.observe(document.body,{childList:!0,subtree:!0}),document.querySelectorAll("img").forEach((n=>this.processImage(n)))}async processImage(n){if(!this.processedImages.has(n)){this.processedImages.add(n);try{const e=document.createElement("div");e.style.position="relative",e.style.display="inline-block",n.parentNode?.insertBefore(e,n),e.appendChild(n);const t=await i(n.src,p.code);t.success&&t.translatedData&&t.translatedData.forEach((({translated:e,vertices:t})=>{if(!t||t.length<4)return;const o=document.createElement("div");o.textContent=e,o.style.cssText=`\n                       position: absolute;\n                        left: ${t[0].x}px;\n                        top: ${t[0].y+-20}px;\n                        color: white;\n                        text-shadow: -1px -1px 0 #48596e, \n                                    1px -1px 0 #48596e, \n                                    -1px 1px 0 #48596e, \n                                    1px 1px 0 #48596e;\n                        font-family: Arial, sans-serif;\n                        font-size: 14px;\n                        pointer-events: auto; /* Enable hover detection */\n                        z-index: 1000;\n                        transition: opacity 0.2s ease-in-out; /* Smooth fade effect */\n                    `,o.addEventListener("mouseenter",(()=>{o.style.opacity="0"})),o.addEventListener("mouseleave",(()=>{o.style.opacity="1"})),n.parentNode?.insertBefore(o,n)}))}catch(n){console.error("Error processing image:",n)}}}};function R(){const n=F(),e=document.querySelector(".progress-bar");if(!e)return;const t=Math.min(n.length/5*100,100);e.style.width=`${t}%`,n.length>=5?e.style.backgroundColor="#FFD700":e.style.backgroundColor=d}P.init()})()})();